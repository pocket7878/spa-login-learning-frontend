import { useAuth0 } from "@auth0/auth0-react";
import axios from "axios";
import Head from "next/head";
import Image from "next/image";
import { useCallback } from "react";
import { useForm } from "react-hook-form";
import useSWR, { mutate } from "swr";
import { WithAuth } from "../lib/with-auth";
import styles from "../styles/Home.module.css";

type Todo = {
  id: string;
  description: string;
};

type ToDoFormData = {
  description: string;
};

export default function Todos() {
  const {
    user,
    isAuthenticated,
    getAccessTokenWithPopup,
    getAccessTokenSilently,
  } = useAuth0();
  const { register, handleSubmit, setValue } = useForm<ToDoFormData>();

  const todoFetcher = useCallback(async () => {
    const authToken = await getAccessTokenSilently({
      audience: "https://spa-login-test.herokuapp.com/",
      scope: "read:todos",
    });
    const response = await axios.get(
      "https://spa-login-test.herokuapp.com/todos",
      {
        headers: {
          Authorization: `Bearer ${authToken}`,
          "Content-Type": "application/json",
        },
				data: {},
      },
    );

    return response.data;
  }, [getAccessTokenSilently]);

  const { data: todos, error } = useSWR<Todo[], any>("/todos", todoFetcher);

  const handleSubmitImpl = useCallback(
    async (data: ToDoFormData) => {
      const authToken = await getAccessTokenSilently({
        audience: "https://spa-login-test.herokuapp.com/",
        scope: "read:todos",
      });
      await axios.post(
        "https://spa-login-test.herokuapp.com/todos",
        {
          todo: {
            description: data.description,
          },
        },
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
						"Content-Type": "application/json",
          },
        }
      );

      mutate("/todos");
      setValue("description", "");
    },
    [getAccessTokenSilently, setValue]
  );

  const handleDelete = useCallback(
    async (todo: Todo) => {
      const authToken = await getAccessTokenSilently({
        audience: "https://spa-login-test.herokuapp.com/",
        scope: "delete:todos",
      });
      await axios.delete(
        `https://spa-login-test.herokuapp.com/todos/${todo.id}`,
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
						"Content-Type": "application/json",
          },
        }
      );

      mutate("/todos");
    },
    [getAccessTokenSilently]
  );

  return (
    <WithAuth>
      <div className={styles.container}>
        <Head>
          <title>Your TODOs</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <h1 className={styles.title}>Your TODOs</h1>
          {isAuthenticated && user.email}
          <form onSubmit={handleSubmit(handleSubmitImpl)} className="p-2">
            <input
              {...register("description", { required: true })}
              type="text"
              className="bg-gray-100 p-2 rounded-md mr-2 w-64"
              placeholder="What needs to be done?"
            />
            <input
              className="bg-blue-800 text-white p-2 rounded-md"
              type="submit"
              value="追加"
            />
          </form>
          {isAuthenticated && (
            <>
              {todos && (
                <div className="flex flex-col">
                  {todos.map((todo) => {
                    return (
                      <div
                        className="flex flex-row m-2"
                        key={`todo_${todo.id}`}
                      >
                        <div className="p-2 bg-gray-100 flex-grow mr-2">
                          {todo.description}
                        </div>
                        <button
                          onClick={() => handleDelete(todo)}
                          className="bg-red-600 text-white p-2 rounded-md flex-grow-0"
                        >
                          Delete
                        </button>
                      </div>
                    );
                  })}
                </div>
              )}
              {error && <p>{error.message}</p>}
            </>
          )}
        </main>

        <footer className={styles.footer}>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{" "}
            <span className={styles.logo}>
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                width={72}
                height={16}
              />
            </span>
          </a>
        </footer>
      </div>
    </WithAuth>
  );
}
