import { useAuth0 } from "@auth0/auth0-react";
import axios from "axios";
import Head from "next/head";
import Image from "next/image";
import { useCallback } from "react";
import { useForm } from "react-hook-form";
import useSWR, { mutate } from "swr";
import { WithAuth } from "../lib/with-auth";
import styles from "../styles/Home.module.css";

type Todo = {
  description: string;
};

type ToDoFormData = {
  description: string;
};

export default function Todos() {
  const {
    user,
    isAuthenticated,
    getAccessTokenWithPopup,
    getAccessTokenSilently,
  } = useAuth0();
  const { register, handleSubmit } = useForm<ToDoFormData>();

  const todoFetcher = useCallback(async () => {
    const authToken = await getAccessTokenSilently({
      audience: "https://spa-login-test.herokuapp.com/",
      scope: "read:todos",
    });
    const response = await axios.get(
      "https://spa-login-test.herokuapp.com/todos",
      {
        headers: {
          Authorization: `Bearer ${authToken}`,
        },
      }
    );

    return response.data;
  }, [getAccessTokenSilently]);

  const { data: todos, error } = useSWR<Todo[], any>("/todos", todoFetcher);

  const handleSubmitImpl = useCallback(
    async (data: ToDoFormData) => {
      const authToken = await getAccessTokenSilently({
        audience: "https://spa-login-test.herokuapp.com/",
        scope: "read:todos",
      });
      await axios.post(
        "https://spa-login-test.herokuapp.com/todos",
        {
          todo: {
            description: data.description,
          },
        },
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        }
      );

			mutate("/todos")
    },
    [getAccessTokenSilently]
  );

  return (
    <WithAuth>
      <div className={styles.container}>
        <Head>
          <title>Your TODOs</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <h1 className={styles.title}>Your TODOs</h1>
          {isAuthenticated && (
            <>
              <p>{user.email} todo</p>
              {todos && (
                <ul>
                  {todos.map((todo) => {
                    return <li key={todo.description}>{todo.description}</li>;
                  })}
                </ul>
              )}
              {error && <p>{error.message}</p>}
              <form onSubmit={handleSubmit(handleSubmitImpl)}>
                <input
                  {...register("description", { required: true })}
                  type="text"
                />
                <input type="submit" value="追加" />
              </form>
            </>
          )}
        </main>

        <footer className={styles.footer}>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{" "}
            <span className={styles.logo}>
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                width={72}
                height={16}
              />
            </span>
          </a>
        </footer>
      </div>
    </WithAuth>
  );
}
